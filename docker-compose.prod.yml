# Production Docker Compose with optimizations
version: '3.8'

services:
  # MongoDB with replica set for production
  mongodb:
    image: mongo:7-jammy
    container_name: mern-dashboard-mongodb-prod
    restart: always
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_prod_data:/data/db
      - ./mongo-init-prod.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./mongodb.conf:/etc/mongod.conf:ro
    networks:
      - mern-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: mern-dashboard-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mern-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Backend Server with production optimizations
  server:
    build: 
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: mern-dashboard-server-prod
    restart: always
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DB_NAME}?authSource=admin&replicaSet=rs0
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      CLIENT_URL: ${CLIENT_URL}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mern-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend with Nginx and SSL
  client:
    build: 
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: mern-dashboard-client-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      server:
        condition: service_healthy
    networks:
      - mern-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Load Balancer (for scaling)
  nginx-lb:
    image: nginx:alpine
    container_name: mern-dashboard-lb
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - client
      - server
    networks:
      - mern-network

networks:
  mern-network:
    driver: bridge

volumes:
  mongodb_prod_data:
    driver: local
  redis_data:
    driver: local